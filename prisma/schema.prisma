// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Audience {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique
  email           String    @unique
  password        String
  isEmailVerified Boolean   @default(false)
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt

  // Relationships
  userDetail  UserDetail?
  tweets      Tweet[]
  likedTweets LikedTweet[]
  followers   Follower[]   @relation("Followers")
  following   Follower[]   @relation("Following")
  retweets    Retweet[]
  comments    Comment[]
}

model UserDetail {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  firstName   String
  lastName    String
  bio         String?
  phoneNumber String?
  profile     String?
  birthdate   DateTime?
  website     String?
  location    String?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])
}

// Explicit JOIN table
model Follower {
  id         Int      @id @default(autoincrement())
  userId     Int
  followerId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relationships
  user     User @relation("Followers", fields: [userId], references: [id])
  follower User @relation("Following", fields: [followerId], references: [id])

  @@index([userId, followerId])
}

model Tweet {
  id         Int       @id @default(autoincrement())
  authorId   Int
  text       String
  audience   Audience  @default(PUBLIC)
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  //Relationships
  author        User         @relation(fields: [authorId], references: [id])
  tweetImages TweetImage[]
  likedTweets LikedTweet[]
  retweets    Retweet[]
  comments    Comment[]

  @@index([created_at])
}

model TweetImage {
  id         Int       @id @default(autoincrement())
  url        String
  tweetId    Int?
  commentId  Int?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  // Relationships
  tweet   Tweet?   @relation(fields: [tweetId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id], onDelete:NoAction, onUpdate:NoAction)
}

// Explicit JOIN table
model LikedTweet {
  id         Int       @id @default(autoincrement())
  tweetId    Int
  userId     Int
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  // Relationships
  tweet Tweet @relation(fields: [tweetId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([tweetId, userId])
}

// Explicit JOIN table
model Retweet {
  id         Int       @id @default(autoincrement())
  userId     Int
  tweetId    Int
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  // Relationships
  user  User  @relation(fields: [userId], references: [id])
  tweet Tweet @relation(fields: [tweetId], references: [id])

  @@index([userId, tweetId])
}

model Comment {
  id         Int       @id @default(autoincrement())
  text       String
  userId     Int
  tweetId    Int
  commentId  Int?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  // Relationships
  author          User         @relation(fields: [userId], references: [id])
  tweet         Tweet        @relation(fields: [tweetId], references: [id])
  commentImages TweetImage[]

  // Self-referencing relationships
  comment     Comment?  @relation("CommentThread", fields: [commentId], references: [id], onDelete:NoAction, onUpdate:NoAction)
  subComments Comment[] @relation("CommentThread")
}
